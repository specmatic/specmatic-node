"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
exports.initLogger = initLogger;
var _winston = require("winston");
var _fs = _interopRequireDefault(require("fs"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
var logFormat = _winston.format.printf(function (_ref) {
  var level = _ref.level,
    message = _ref.message,
    label = _ref.label,
    timestamp = _ref.timestamp;
  return "[".concat(label, "] ").concat(timestamp, " ").concat(level, ": ").concat(message);
});
function getSpecmaticConfig() {
  var packageJsonPath = './package.json';
  var specmaticConfig;
  if (_fs["default"].existsSync(packageJsonPath)) {
    var packageJsonContent;
    try {
      packageJsonContent = _fs["default"].readFileSync(packageJsonPath);
    } catch (error) {
      packageJsonContent = '{}';
    }
    var packageConfig = JSON.parse(packageJsonContent);
    specmaticConfig = packageConfig.specmatic;
  }
  return specmaticConfig || {};
}
function getLogLevel() {
  var logLevel;
  if (process.env.SPECMATIC_LOG_LEVEL) {
    logLevel = process.env.SPECMATIC_LOG_LEVEL;
  }
  if (!logLevel || !_winston.config.syslog.levels[logLevel]) {
    var specmaticConfig = getSpecmaticConfig();
    logLevel = specmaticConfig.logLevel;
  }
  if (!logLevel || !_winston.config.syslog.levels[logLevel]) {
    logLevel = 'warn';
  }
  return logLevel;
}
function initLogger() {
  var logLevel = getLogLevel();
  var logger = (0, _winston.createLogger)({
    level: logLevel,
    format: _winston.format.combine(_winston.format.label({
      label: 'specmatic'
    }), _winston.format.timestamp({
      format: 'DD-MM-YYYY HH:mm:ss'
    }), logFormat),
    transports: [new _winston.transports.Console()]
  });
  return logger;
}
var _default = exports["default"] = initLogger();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfd2luc3RvbiIsInJlcXVpcmUiLCJfZnMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0Iiwib2JqIiwiX19lc01vZHVsZSIsImxvZ0Zvcm1hdCIsImZvcm1hdCIsInByaW50ZiIsIl9yZWYiLCJsZXZlbCIsIm1lc3NhZ2UiLCJsYWJlbCIsInRpbWVzdGFtcCIsImNvbmNhdCIsImdldFNwZWNtYXRpY0NvbmZpZyIsInBhY2thZ2VKc29uUGF0aCIsInNwZWNtYXRpY0NvbmZpZyIsImZzIiwiZXhpc3RzU3luYyIsInBhY2thZ2VKc29uQ29udGVudCIsInJlYWRGaWxlU3luYyIsImVycm9yIiwicGFja2FnZUNvbmZpZyIsIkpTT04iLCJwYXJzZSIsInNwZWNtYXRpYyIsImdldExvZ0xldmVsIiwibG9nTGV2ZWwiLCJwcm9jZXNzIiwiZW52IiwiU1BFQ01BVElDX0xPR19MRVZFTCIsImNvbmZpZyIsInN5c2xvZyIsImxldmVscyIsImluaXRMb2dnZXIiLCJsb2dnZXIiLCJjcmVhdGVMb2dnZXIiLCJjb21iaW5lIiwidHJhbnNwb3J0cyIsIkNvbnNvbGUiLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvY29tbW9uL2xvZ2dlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb25maWcsIGNyZWF0ZUxvZ2dlciwgZm9ybWF0LCB0cmFuc3BvcnRzIH0gZnJvbSAnd2luc3RvbidcbmltcG9ydCBmcyBmcm9tICdmcydcblxuY29uc3QgbG9nRm9ybWF0ID0gZm9ybWF0LnByaW50ZigoeyBsZXZlbCwgbWVzc2FnZSwgbGFiZWwsIHRpbWVzdGFtcCB9KSA9PiB7XG4gICAgcmV0dXJuIGBbJHtsYWJlbH1dICR7dGltZXN0YW1wfSAke2xldmVsfTogJHttZXNzYWdlfWBcbn0pXG5cbmZ1bmN0aW9uIGdldFNwZWNtYXRpY0NvbmZpZygpIHtcbiAgICBjb25zdCBwYWNrYWdlSnNvblBhdGggPSAnLi9wYWNrYWdlLmpzb24nXG4gICAgdmFyIHNwZWNtYXRpY0NvbmZpZ1xuICAgIGlmIChmcy5leGlzdHNTeW5jKHBhY2thZ2VKc29uUGF0aCkpIHtcbiAgICAgICAgbGV0IHBhY2thZ2VKc29uQ29udGVudFxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcGFja2FnZUpzb25Db250ZW50ID0gZnMucmVhZEZpbGVTeW5jKHBhY2thZ2VKc29uUGF0aClcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHBhY2thZ2VKc29uQ29udGVudCA9ICd7fSdcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYWNrYWdlQ29uZmlnID0gSlNPTi5wYXJzZShwYWNrYWdlSnNvbkNvbnRlbnQgYXMgdW5rbm93biBhcyBzdHJpbmcpXG4gICAgICAgIHNwZWNtYXRpY0NvbmZpZyA9IHBhY2thZ2VDb25maWcuc3BlY21hdGljXG4gICAgfVxuICAgIHJldHVybiBzcGVjbWF0aWNDb25maWcgfHwge31cbn1cblxuZnVuY3Rpb24gZ2V0TG9nTGV2ZWwoKSB7XG4gICAgbGV0IGxvZ0xldmVsXG4gICAgaWYgKHByb2Nlc3MuZW52LlNQRUNNQVRJQ19MT0dfTEVWRUwpIHtcbiAgICAgICAgbG9nTGV2ZWwgPSBwcm9jZXNzLmVudi5TUEVDTUFUSUNfTE9HX0xFVkVMXG4gICAgfVxuICAgIGlmICghbG9nTGV2ZWwgfHwgIWNvbmZpZy5zeXNsb2cubGV2ZWxzW2xvZ0xldmVsXSkge1xuICAgICAgICBjb25zdCBzcGVjbWF0aWNDb25maWcgPSBnZXRTcGVjbWF0aWNDb25maWcoKVxuICAgICAgICBsb2dMZXZlbCA9IHNwZWNtYXRpY0NvbmZpZy5sb2dMZXZlbFxuICAgIH1cbiAgICBpZiAoIWxvZ0xldmVsIHx8ICFjb25maWcuc3lzbG9nLmxldmVsc1tsb2dMZXZlbF0pIHtcbiAgICAgICAgbG9nTGV2ZWwgPSAnd2FybidcbiAgICB9XG4gICAgcmV0dXJuIGxvZ0xldmVsXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0TG9nZ2VyKCkge1xuICAgIGxldCBsb2dMZXZlbCA9IGdldExvZ0xldmVsKClcbiAgICBjb25zdCBsb2dnZXIgPSBjcmVhdGVMb2dnZXIoe1xuICAgICAgICBsZXZlbDogbG9nTGV2ZWwsXG4gICAgICAgIGZvcm1hdDogZm9ybWF0LmNvbWJpbmUoZm9ybWF0LmxhYmVsKHsgbGFiZWw6ICdzcGVjbWF0aWMnIH0pLCBmb3JtYXQudGltZXN0YW1wKHsgZm9ybWF0OiAnREQtTU0tWVlZWSBISDptbTpzcycgfSksIGxvZ0Zvcm1hdCksXG4gICAgICAgIHRyYW5zcG9ydHM6IFtuZXcgdHJhbnNwb3J0cy5Db25zb2xlKCldLFxuICAgIH0pXG4gICAgcmV0dXJuIGxvZ2dlclxufVxuXG5leHBvcnQgZGVmYXVsdCBpbml0TG9nZ2VyKClcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLElBQUFBLFFBQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLEdBQUEsR0FBQUMsc0JBQUEsQ0FBQUYsT0FBQTtBQUFtQixTQUFBRSx1QkFBQUMsR0FBQSxXQUFBQSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxHQUFBRCxHQUFBLGdCQUFBQSxHQUFBO0FBRW5CLElBQU1FLFNBQVMsR0FBR0MsZUFBTSxDQUFDQyxNQUFNLENBQUMsVUFBQUMsSUFBQSxFQUEwQztFQUFBLElBQXZDQyxLQUFLLEdBQUFELElBQUEsQ0FBTEMsS0FBSztJQUFFQyxPQUFPLEdBQUFGLElBQUEsQ0FBUEUsT0FBTztJQUFFQyxLQUFLLEdBQUFILElBQUEsQ0FBTEcsS0FBSztJQUFFQyxTQUFTLEdBQUFKLElBQUEsQ0FBVEksU0FBUztFQUMvRCxXQUFBQyxNQUFBLENBQVdGLEtBQUssUUFBQUUsTUFBQSxDQUFLRCxTQUFTLE9BQUFDLE1BQUEsQ0FBSUosS0FBSyxRQUFBSSxNQUFBLENBQUtILE9BQU87QUFDdkQsQ0FBQyxDQUFDO0FBRUYsU0FBU0ksa0JBQWtCQSxDQUFBLEVBQUc7RUFDMUIsSUFBTUMsZUFBZSxHQUFHLGdCQUFnQjtFQUN4QyxJQUFJQyxlQUFlO0VBQ25CLElBQUlDLGNBQUUsQ0FBQ0MsVUFBVSxDQUFDSCxlQUFlLENBQUMsRUFBRTtJQUNoQyxJQUFJSSxrQkFBa0I7SUFDdEIsSUFBSTtNQUNBQSxrQkFBa0IsR0FBR0YsY0FBRSxDQUFDRyxZQUFZLENBQUNMLGVBQWUsQ0FBQztJQUN6RCxDQUFDLENBQUMsT0FBT00sS0FBSyxFQUFFO01BQ1pGLGtCQUFrQixHQUFHLElBQUk7SUFDN0I7SUFDQSxJQUFNRyxhQUFhLEdBQUdDLElBQUksQ0FBQ0MsS0FBSyxDQUFDTCxrQkFBdUMsQ0FBQztJQUN6RUgsZUFBZSxHQUFHTSxhQUFhLENBQUNHLFNBQVM7RUFDN0M7RUFDQSxPQUFPVCxlQUFlLElBQUksQ0FBQyxDQUFDO0FBQ2hDO0FBRUEsU0FBU1UsV0FBV0EsQ0FBQSxFQUFHO0VBQ25CLElBQUlDLFFBQVE7RUFDWixJQUFJQyxPQUFPLENBQUNDLEdBQUcsQ0FBQ0MsbUJBQW1CLEVBQUU7SUFDakNILFFBQVEsR0FBR0MsT0FBTyxDQUFDQyxHQUFHLENBQUNDLG1CQUFtQjtFQUM5QztFQUNBLElBQUksQ0FBQ0gsUUFBUSxJQUFJLENBQUNJLGVBQU0sQ0FBQ0MsTUFBTSxDQUFDQyxNQUFNLENBQUNOLFFBQVEsQ0FBQyxFQUFFO0lBQzlDLElBQU1YLGVBQWUsR0FBR0Ysa0JBQWtCLENBQUMsQ0FBQztJQUM1Q2EsUUFBUSxHQUFHWCxlQUFlLENBQUNXLFFBQVE7RUFDdkM7RUFDQSxJQUFJLENBQUNBLFFBQVEsSUFBSSxDQUFDSSxlQUFNLENBQUNDLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDTixRQUFRLENBQUMsRUFBRTtJQUM5Q0EsUUFBUSxHQUFHLE1BQU07RUFDckI7RUFDQSxPQUFPQSxRQUFRO0FBQ25CO0FBRU8sU0FBU08sVUFBVUEsQ0FBQSxFQUFHO0VBQ3pCLElBQUlQLFFBQVEsR0FBR0QsV0FBVyxDQUFDLENBQUM7RUFDNUIsSUFBTVMsTUFBTSxHQUFHLElBQUFDLHFCQUFZLEVBQUM7SUFDeEIzQixLQUFLLEVBQUVrQixRQUFRO0lBQ2ZyQixNQUFNLEVBQUVBLGVBQU0sQ0FBQytCLE9BQU8sQ0FBQy9CLGVBQU0sQ0FBQ0ssS0FBSyxDQUFDO01BQUVBLEtBQUssRUFBRTtJQUFZLENBQUMsQ0FBQyxFQUFFTCxlQUFNLENBQUNNLFNBQVMsQ0FBQztNQUFFTixNQUFNLEVBQUU7SUFBc0IsQ0FBQyxDQUFDLEVBQUVELFNBQVMsQ0FBQztJQUM1SGlDLFVBQVUsRUFBRSxDQUFDLElBQUlBLG1CQUFVLENBQUNDLE9BQU8sQ0FBQyxDQUFDO0VBQ3pDLENBQUMsQ0FBQztFQUNGLE9BQU9KLE1BQU07QUFDakI7QUFBQyxJQUFBSyxRQUFBLEdBQUFDLE9BQUEsY0FFY1AsVUFBVSxDQUFDLENBQUMifQ==