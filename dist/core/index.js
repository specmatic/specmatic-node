"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.testWithApiCoverage = exports.test = exports.stopStub = exports.startStub = exports.startApiCoverageServer = exports.showTestResults = exports.setExpectations = exports.printJarVersion = exports.Stub = void 0;
var _nodeFetch = _interopRequireDefault(require("node-fetch"));
var _path = _interopRequireDefault(require("path"));
var _fastXmlParser = require("fast-xml-parser");
var _fs = _interopRequireDefault(require("fs"));
var _logger = _interopRequireDefault(require("../common/logger"));
var _runner = require("../common/runner");
var _promise = _interopRequireDefault(require("terminate/promise"));
var _expressListEndpoints = _interopRequireDefault(require("express-list-endpoints"));
var _http = _interopRequireDefault(require("http"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var Stub = /*#__PURE__*/_createClass(function Stub(host, port, url, process) {
  _classCallCheck(this, Stub);
  _defineProperty(this, "host", void 0);
  _defineProperty(this, "port", void 0);
  _defineProperty(this, "url", void 0);
  _defineProperty(this, "process", void 0);
  this.host = host;
  this.port = port;
  this.url = url;
  this.process = process;
});
exports.Stub = Stub;
var startStub = function startStub(host, port, args) {
  var cmd = "stub";
  if (host) cmd += " --host=".concat(host);
  if (port) cmd += " --port=".concat(port);
  if (args) cmd += ' ' + args.join(' ');
  _logger["default"].info('Stub: Starting server');
  _logger["default"].debug("Stub: Executing \"".concat(cmd, "\""));
  return new Promise(function (resolve, reject) {
    var javaProcess = (0, _runner.callCore)(cmd, function (err) {
      if (err) {
        _logger["default"].error("Stub: Exited with error ".concat(err));
      }
    }, function (message, error) {
      if (!error) {
        if (message.indexOf('Stub server is running') > -1) {
          _logger["default"].info("Stub: ".concat(message));
          var stubInfo = message.split('on');
          if (stubInfo.length < 2) reject('Cannot determine url from stub output');else {
            var _urlInfo$length;
            var url = stubInfo[1].trim();
            var urlInfo = /(.*?):\/\/(.*?):([0-9]+)/.exec(url);
            if (((_urlInfo$length = urlInfo === null || urlInfo === void 0 ? void 0 : urlInfo.length) !== null && _urlInfo$length !== void 0 ? _urlInfo$length : 0) < 4) reject('Cannot determine host and port from stub output');else resolve(new Stub(urlInfo[2], parseInt(urlInfo[3]), urlInfo[0], javaProcess));
          }
        } else if (message.indexOf('Address already in use') > -1) {
          _logger["default"].error("Stub: ".concat(message));
          reject('Address already in use');
        } else {
          _logger["default"].debug("Stub: ".concat(message));
        }
      } else {
        _logger["default"].error("Stub: ".concat(message));
      }
    });
  });
};
exports.startStub = startStub;
var stopStub = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(stub) {
    var _javaProcess$stdout, _javaProcess$stderr;
    var javaProcess;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _logger["default"].debug("Stub: Stopping server at ".concat(stub.url));
          javaProcess = stub.process;
          (_javaProcess$stdout = javaProcess.stdout) === null || _javaProcess$stdout === void 0 ? void 0 : _javaProcess$stdout.removeAllListeners();
          (_javaProcess$stderr = javaProcess.stderr) === null || _javaProcess$stderr === void 0 ? void 0 : _javaProcess$stderr.removeAllListeners();
          javaProcess.removeAllListeners('close');
          _context.next = 7;
          return (0, _promise["default"])(javaProcess.pid);
        case 7:
          _logger["default"].info("Stub: Stopped server at ".concat(stub.url));
        case 8:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return function stopStub(_x) {
    return _ref.apply(this, arguments);
  };
}();
exports.stopStub = stopStub;
var testWithApiCoverage = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(expressApp, host, port, contractPath, args) {
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          return _context3.abrupt("return", new Promise( /*#__PURE__*/function () {
            var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(resolve, _reject) {
              var apiCoverageServer, results;
              return _regeneratorRuntime().wrap(function _callee2$(_context2) {
                while (1) switch (_context2.prev = _context2.next) {
                  case 0:
                    _context2.next = 2;
                    return startApiCoverageServer(expressApp);
                  case 2:
                    apiCoverageServer = _context2.sent;
                    _context2.next = 5;
                    return test(host, port, contractPath, args);
                  case 5:
                    results = _context2.sent;
                    apiCoverageServer.close(function () {
                      resolve(results);
                    });
                  case 7:
                  case "end":
                    return _context2.stop();
                }
              }, _callee2);
            }));
            return function (_x7, _x8) {
              return _ref3.apply(this, arguments);
            };
          }()));
        case 1:
        case "end":
          return _context3.stop();
      }
    }, _callee3);
  }));
  return function testWithApiCoverage(_x2, _x3, _x4, _x5, _x6) {
    return _ref2.apply(this, arguments);
  };
}();
exports.testWithApiCoverage = testWithApiCoverage;
var test = function test(host, port, contractPath, args) {
  var specsPath = _path["default"].resolve(contractPath + '');
  var cmd = "test";
  if (contractPath) cmd += " ".concat(specsPath);
  cmd += ' --junitReportDir=dist/test-report';
  if (host) cmd += " --host=".concat(host);
  if (port) cmd += " --port=".concat(port);
  if (args) cmd += ' ' + args.join(' ');
  _logger["default"].info('Test: Running');
  _logger["default"].debug("Test: Executing \"".concat(cmd, "\""));
  var reportDir = _path["default"].resolve('dist/test-report');
  _fs["default"].rmSync(reportDir, {
    recursive: true,
    force: true
  });
  return new Promise(function (resolve, _reject) {
    (0, _runner.callCore)(cmd, function (err) {
      if (err) _logger["default"].error("Test: Failed with error ".concat(err));
      var testCases = parseJunitXML();
      var total = testCases.length;
      var failure = testCases.filter(function (testcase) {
        return testcase['failure'] || testcase['skipped'];
      }).length;
      var success = total - failure;
      var result = {
        total: total,
        success: success,
        failure: failure
      };
      resolve(result);
    }, function (message, error) {
      if (message.indexOf('API COVERAGE SUMMARY') > -1) {
        console.log(message); //Log always for all log levels
      } else {
        _logger["default"][error ? 'error' : 'debug']("Test: ".concat(message));
      }
    });
  });
};
exports.test = test;
var showTestResults = function showTestResults(testFn) {
  var testCases = parseJunitXML();
  testCases.map(function (testcase) {
    var name = 'No Name';
    if (testcase['system-out']) {
      var nameTempArr = testcase['system-out'].trim().replace(/\n/g, '').split(/display-name:.*Scenario: /);
      if (nameTempArr.length > 1) name = nameTempArr[1].trim();
    }
    testFn(name, function () {
      if (testcase.failure || testcase.skipped) throw new Error('Did not pass');
    });
  });
};
exports.showTestResults = showTestResults;
var setExpectations = function setExpectations(stubPath, stubServerBaseUrl) {
  var stubResponse = require(_path["default"].resolve(stubPath));
  stubServerBaseUrl = stubServerBaseUrl || 'http://localhost:9000';
  _logger["default"].info("Set Expectations: Stub url is ".concat(stubServerBaseUrl));
  return new Promise(function (resolve, reject) {
    (0, _nodeFetch["default"])("".concat(stubServerBaseUrl, "/_specmatic/expectations"), {
      method: 'POST',
      body: JSON.stringify(stubResponse)
    }).then( /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(response) {
        var body;
        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              if (!(response.status != 200)) {
                _context4.next = 9;
                break;
              }
              _logger["default"].error("Set Expectations: Failed with status code ".concat(response.status));
              _context4.next = 4;
              return response.text();
            case 4:
              body = _context4.sent;
              _logger["default"].error(body);
              reject("Setting expecation failed");
              _context4.next = 11;
              break;
            case 9:
              _logger["default"].info('Set Expectations: Finished');
              resolve();
            case 11:
            case "end":
              return _context4.stop();
          }
        }, _callee4);
      }));
      return function (_x9) {
        return _ref4.apply(this, arguments);
      };
    }())["catch"](function (err) {
      _logger["default"].error("Set Expectations: Failed with error ".concat(err));
      reject("Setting expecation failed with error ".concat(err));
    });
  });
};
exports.setExpectations = setExpectations;
var printJarVersion = function printJarVersion() {
  var cmd = "--version";
  _logger["default"].info('Print Jar Version: Running');
  _logger["default"].debug("Print Jar Version: Executing \"".concat(cmd, "\""));
  (0, _runner.callCore)(cmd, function (err) {
    if (err) _logger["default"].error("Print Jar Version: Failed with error ".concat(err));
  }, function (message, error) {
    if (error) _logger["default"].error("Print Jar Version: ".concat(message));else console.log("".concat(message));
  });
};
exports.printJarVersion = printJarVersion;
var startApiCoverageServer = function startApiCoverageServer(expressApp) {
  _logger["default"].debug("Registering API endpoint for coverage");
  var app = _http["default"].createServer(function (_req, res) {
    res.writeHead(200, {
      'Content-Type': 'application/json'
    });
    var endPoints = JSON.stringify(extractEndPoints(expressApp));
    _logger["default"].debug("Endpoints: ".concat(endPoints));
    res.end(endPoints);
  });
  return new Promise(function (resolve, reject) {
    app.on('error', function (err) {
      _logger["default"].error('Error while starting end points server for api coverage', err);
      reject('Error while starting end points server for api coverage');
    });
    app.listen({
      host: '127.0.0.1',
      port: 0
    }, function () {
      var address = app.address();
      process.env['endpointsAPI'] = "http://".concat(address === null || address === void 0 ? void 0 : address.address, ":").concat(address === null || address === void 0 ? void 0 : address.port);
      _logger["default"].info("Endpoints API registered at ".concat(process.env['endpointsAPI']));
      resolve(app);
    });
  });
};
exports.startApiCoverageServer = startApiCoverageServer;
var parseJunitXML = function parseJunitXML() {
  var reportPath = _path["default"].resolve('dist/test-report/TEST-junit-jupiter.xml');
  var data = _fs["default"].readFileSync(reportPath);
  var parser = new _fastXmlParser.XMLParser();
  var resultXml = parser.parse(data);
  resultXml.testsuite.testcase = Array.isArray(resultXml.testsuite.testcase) ? resultXml.testsuite.testcase : [resultXml.testsuite.testcase];
  return resultXml.testsuite.testcase;
};
var listEndPoints = function listEndPoints(expressApp) {
  var details = (0, _expressListEndpoints["default"])(expressApp);
  var endPoints = {};
  details.map(function (apiDetail) {
    endPoints[apiDetail.path] = apiDetail.methods;
  });
  delete endPoints['*'];
  return endPoints;
};
function extractEndPoints(expressApp) {
  var endPoints = listEndPoints(expressApp);
  var springActuatorPayload = {
    contexts: {
      application: {
        mappings: {
          dispatcherServlets: {
            dispatcherServlet: []
          }
        }
      }
    }
  };
  Object.keys(endPoints).sort().map(function (path) {
    springActuatorPayload.contexts.application.mappings.dispatcherServlets.dispatcherServlet.push({
      details: {
        requestMappingConditions: {
          methods: endPoints[path].sort(),
          patterns: [path.replace(/:([^/]+)/g, '{$1}').replace(/\\/g, '')]
        }
      }
    });
  });
  return springActuatorPayload;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,