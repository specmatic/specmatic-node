"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.testWithApiCoverage = exports.test = exports.stopStub = exports.startStub = exports.startApiCoverageServer = exports.showTestResults = exports.setExpectations = exports.setExpectationJson = exports.printJarVersion = exports.Stub = void 0;
var _axios = _interopRequireDefault(require("axios"));
var _path = _interopRequireDefault(require("path"));
var _fastXmlParser = require("fast-xml-parser");
var _fs = _interopRequireDefault(require("fs"));
var _logger = _interopRequireDefault(require("../common/logger"));
var _runner = require("../common/runner");
var _expressListEndpoints = _interopRequireDefault(require("express-list-endpoints"));
var _http = _interopRequireDefault(require("http"));
var _shutdownUtils = require("./shutdownUtils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var Stub = exports.Stub = /*#__PURE__*/_createClass(function Stub(host, port, url, process) {
  _classCallCheck(this, Stub);
  _defineProperty(this, "host", void 0);
  _defineProperty(this, "port", void 0);
  _defineProperty(this, "url", void 0);
  _defineProperty(this, "process", void 0);
  this.host = host;
  this.port = port;
  this.url = url;
  this.process = process;
});
var startStub = exports.startStub = function startStub(host, port, args) {
  var cmd = "stub";
  if (host) cmd += " --host=".concat(host);
  if (port) cmd += " --port=".concat(port);
  if (args) cmd += ' ' + args.join(' ');
  _logger["default"].info('Stub: Starting server');
  _logger["default"].debug("Stub: Executing \"".concat(cmd, "\""));
  return new Promise(function (resolve, reject) {
    var javaProcess = (0, _runner.callCore)(cmd, function (err) {
      if (err) {
        _logger["default"].error("Stub: Exited with error ".concat(err));
      }
    }, function (message, error) {
      if (!error) {
        if (message.indexOf('Stub server is running') > -1) {
          _logger["default"].info("Stub: ".concat(message));
          var stubInfo = message.split('on');
          if (stubInfo.length < 2) reject('Cannot determine url from stub output');else {
            var _urlInfo$length;
            var url = stubInfo[1].trim();
            var urlInfo = /(.*?):\/\/(.*?):([0-9]+)/.exec(url);
            if (((_urlInfo$length = urlInfo === null || urlInfo === void 0 ? void 0 : urlInfo.length) !== null && _urlInfo$length !== void 0 ? _urlInfo$length : 0) < 4) reject('Cannot determine host and port from stub output');else resolve(new Stub(urlInfo[2], parseInt(urlInfo[3]), urlInfo[0], javaProcess));
          }
        } else if (message.indexOf('Address already in use') > -1) {
          _logger["default"].error("Stub: ".concat(message));
          reject('Address already in use');
        } else {
          _logger["default"].debug("Stub: ".concat(message));
        }
      } else {
        _logger["default"].error("Stub: ".concat(message));
      }
    });
  });
};
var stopStub = exports.stopStub = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(stub) {
    var _javaProcess$stdout, _javaProcess$stderr;
    var javaProcess;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _logger["default"].debug("Stub: Stopping server at ".concat(stub.url));
          javaProcess = stub.process;
          (_javaProcess$stdout = javaProcess.stdout) === null || _javaProcess$stdout === void 0 || _javaProcess$stdout.removeAllListeners();
          (_javaProcess$stderr = javaProcess.stderr) === null || _javaProcess$stderr === void 0 || _javaProcess$stderr.removeAllListeners();
          javaProcess.removeAllListeners('close');
          _logger["default"].debug('Trying to stop stub process gracefully ...');
          _context.next = 8;
          return (0, _shutdownUtils.gracefulShutdown)(javaProcess);
        case 8:
          _logger["default"].debug('Completed graceful termination of the stub process');
          _logger["default"].info("Stub: Stopped server at ".concat(stub.url));
        case 10:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return function stopStub(_x) {
    return _ref.apply(this, arguments);
  };
}();
var testWithApiCoverage = exports.testWithApiCoverage = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(expressApp, host, port, contractPath, args) {
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          return _context3.abrupt("return", new Promise( /*#__PURE__*/function () {
            var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(resolve, _reject) {
              var apiCoverageServer, results;
              return _regeneratorRuntime().wrap(function _callee2$(_context2) {
                while (1) switch (_context2.prev = _context2.next) {
                  case 0:
                    _context2.next = 2;
                    return startApiCoverageServer(expressApp);
                  case 2:
                    apiCoverageServer = _context2.sent;
                    _context2.next = 5;
                    return test(host, port, contractPath, args);
                  case 5:
                    results = _context2.sent;
                    apiCoverageServer.close(function () {
                      resolve(results);
                    });
                  case 7:
                  case "end":
                    return _context2.stop();
                }
              }, _callee2);
            }));
            return function (_x7, _x8) {
              return _ref3.apply(this, arguments);
            };
          }()));
        case 1:
        case "end":
          return _context3.stop();
      }
    }, _callee3);
  }));
  return function testWithApiCoverage(_x2, _x3, _x4, _x5, _x6) {
    return _ref2.apply(this, arguments);
  };
}();
var test = exports.test = function test(host, port, contractPath, args) {
  var specsPath = _path["default"].resolve(contractPath + '');
  var cmd = "test";
  if (contractPath) cmd += " ".concat(specsPath);
  cmd += ' --junitReportDir=dist/test-report';
  if (host) cmd += " --host=".concat(host);
  if (port) cmd += " --port=".concat(port);
  if (args) cmd += ' ' + args.join(' ');
  _logger["default"].info('Test: Running');
  _logger["default"].debug("Test: Executing \"".concat(cmd, "\""));
  var reportDir = _path["default"].resolve('dist/test-report');
  _fs["default"].rmSync(reportDir, {
    recursive: true,
    force: true
  });
  return new Promise(function (resolve, _reject) {
    (0, _runner.callCore)(cmd, function (err) {
      if (err) _logger["default"].error("Test: Failed with error ".concat(err));
      var testCases = parseJunitXML();
      var total = testCases.length;
      var failure = testCases.filter(function (testcase) {
        return testcase['failure'] || testcase['skipped'];
      }).length;
      var success = total - failure;
      var result = {
        total: total,
        success: success,
        failure: failure
      };
      resolve(result);
    }, function (message, error) {
      if (message.indexOf('API COVERAGE SUMMARY') > -1) {
        console.log(message); //Log always for all log levels
      } else {
        _logger["default"][error ? 'error' : 'debug']("Test: ".concat(message));
      }
    });
  });
};
var showTestResults = exports.showTestResults = function showTestResults(testFn) {
  var testCases = parseJunitXML();
  testCases.map(function (testcase) {
    var name = 'No Name';
    if (testcase['system-out']) {
      var nameTempArr = testcase['system-out'].trim().replace(/\n/g, '').split(/display-name:.*Scenario: /);
      if (nameTempArr.length > 1) name = nameTempArr[1].trim();
    }
    testFn(name, function () {
      if (testcase.failure || testcase.skipped) throw new Error('Did not pass');
    });
  });
};
var setExpectations = exports.setExpectations = function setExpectations(stubPath, stubServerBaseUrl) {
  var stubResponse = require(_path["default"].resolve(stubPath));
  return setExpectationJson(stubResponse, stubServerBaseUrl);
};
var setExpectationJson = exports.setExpectationJson = function setExpectationJson(stubResponse, stubServerBaseUrl) {
  stubServerBaseUrl = stubServerBaseUrl || 'http://localhost:9000';
  _logger["default"].info("Set Expectations: Stub url is ".concat(stubServerBaseUrl));
  return new Promise(function (resolve, reject) {
    _axios["default"].post("".concat(stubServerBaseUrl, "/_specmatic/expectations"), stubResponse).then(function (response) {
      _logger["default"].debug("Set Expectations: ".concat(response.data));
      _logger["default"].info('Set Expectations: Finished');
      resolve();
    })["catch"](function (err) {
      var setExpectationsErrorMessage = "Set Expectations: Failed with error ".concat(err);
      _logger["default"].error(setExpectationsErrorMessage);
      reject(setExpectationsErrorMessage);
    });
  });
};
var printJarVersion = exports.printJarVersion = function printJarVersion() {
  var cmd = "--version";
  _logger["default"].info('Print Jar Version: Running');
  _logger["default"].debug("Print Jar Version: Executing \"".concat(cmd, "\""));
  (0, _runner.callCore)(cmd, function (err) {
    if (err) _logger["default"].error("Print Jar Version: Failed with error ".concat(err));
  }, function (message, error) {
    if (error) _logger["default"].error("Print Jar Version: ".concat(message));else console.log("".concat(message));
  });
};
var startApiCoverageServer = exports.startApiCoverageServer = function startApiCoverageServer(expressApp) {
  _logger["default"].debug("Registering API endpoint for coverage");
  var app = _http["default"].createServer(function (_req, res) {
    res.writeHead(200, {
      'Content-Type': 'application/json'
    });
    var endPoints = JSON.stringify(extractEndPoints(expressApp));
    _logger["default"].debug("Endpoints: ".concat(endPoints));
    res.end(endPoints);
  });
  return new Promise(function (resolve, reject) {
    app.on('error', function (err) {
      _logger["default"].error('Error while starting end points server for api coverage', err);
      reject('Error while starting end points server for api coverage');
    });
    app.listen({
      host: '127.0.0.1',
      port: 0
    }, function () {
      var address = app.address();
      process.env['endpointsAPI'] = "http://".concat(address === null || address === void 0 ? void 0 : address.address, ":").concat(address === null || address === void 0 ? void 0 : address.port);
      _logger["default"].info("Endpoints API registered at ".concat(process.env['endpointsAPI']));
      resolve(app);
    });
  });
};
var parseJunitXML = function parseJunitXML() {
  var reportPath = _path["default"].resolve('dist/test-report/TEST-junit-jupiter.xml');
  var data = _fs["default"].readFileSync(reportPath);
  var parser = new _fastXmlParser.XMLParser();
  var resultXml = parser.parse(data);
  resultXml.testsuite.testcase = Array.isArray(resultXml.testsuite.testcase) ? resultXml.testsuite.testcase : [resultXml.testsuite.testcase];
  return resultXml.testsuite.testcase;
};
var listEndPoints = function listEndPoints(expressApp) {
  var details = (0, _expressListEndpoints["default"])(expressApp);
  var endPoints = {};
  details.map(function (apiDetail) {
    endPoints[apiDetail.path] = apiDetail.methods;
  });
  delete endPoints['*'];
  return endPoints;
};
function extractEndPoints(expressApp) {
  var endPoints = listEndPoints(expressApp);
  var springActuatorPayload = {
    contexts: {
      application: {
        mappings: {
          dispatcherServlets: {
            dispatcherServlet: []
          }
        }
      }
    }
  };
  Object.keys(endPoints).sort().map(function (path) {
    springActuatorPayload.contexts.application.mappings.dispatcherServlets.dispatcherServlet.push({
      details: {
        requestMappingConditions: {
          methods: endPoints[path].sort(),
          patterns: [convertEndpointToSpringSyntax(path)].map(removeRegexFromPath)
        }
      }
    });
  });
  return springActuatorPayload;
}
var convertEndpointToSpringSyntax = function convertEndpointToSpringSyntax(path) {
  return path.replace(/:([^/]+)/g, '{$1}').replace(/\\/g, '');
};
var removeRegexFromPath = function removeRegexFromPath(path) {
  return path.replace(/\([^()]*\)/g, '');
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,